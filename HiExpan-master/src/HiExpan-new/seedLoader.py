"""
__author__: Jiaming Shen, Ellen Wu
__description__: User input seed taxonomy used in HiExpan

Format of user supervision:
  [ParentEntityName, ParentLevel, ListOfChildrenEntityName]
Note:
  1. Except the ROOT name, all the other "ParentEntityName" must appear after its parent node appears
  (For example, "machine learning" must appear after "ROOT" (its parent)
  2. Don't add the leaf nodes in userInput
  (For example, "decision trees" is a leaf node, no need to include it in userInput)

"""


def load_seeds(corpusName):
    if corpusName == "wiki":
        userInput = [
            ["ROOT", -1, ["united_states", "china", "canada"]],
            ["united_states", 0, ["california", "illinois", "florida"]],
            ["china", 0, ["shandong", "zhejiang", "sichuan"]],
        ]
    elif corpusName == "dblp":
        userInput = [
            ["ROOT", -1, ["machine_learning", "data_mining", "natural_language_processing", "information_retrieval", "wireless_networks"]],
            ["data_mining", 0, ["association_rule_mining", "text_mining", "outlier_detection"]],
            ["machine_learning", 0, ["support_vector_machines", "decision_trees", "neural_networks"]],
            ["natural_language_processing", 0, ["named_entity_recognition", "information_extraction", "machine_translation"]],
        ]
    elif corpusName == "cvd":
        userInput = [
            ["ROOT", -1, ["cardiovascular_abnormalities", "vascular_diseases", "heart-disease"]],
            ["cardiovascular_abnormalities", 0, ["turner_syndrome", "tetralogy_of_fallot", "noonan_syndrome"]],
            ["vascular_diseases", 0, ["arteriovenous_malformations", "high-blood_pressure", "arterial_occlusions"]],
            ["heart-disease", 0, ["aortic-valve_stenosis", "cardiac_arrests", "carcinoid_heart_disease"]],
        ]
    elif corpusName == "ql":
        userInput = [
            ["ROOT", -1, ["quantum_algorithms", "quantum_systems", "quantum_theory"]],
            ["quantum_algorithms", 0, ["quantum_annealing", "quantum_machine_learning"]],
            ["quantum_systems", 0, ["quantum_computers", "quantum_circuits"]],
            ["quantum_theory", 0, ["quantum_states", "hilbert-space"]],
        ]
    elif corpusName == "SignalProcessing":
        userInput = [
            ["ROOT", -1, ["acoustic_signal_processing", "adaptive_signal_processing", "digital_signal_processing", "image_processing"]],
            ["acoustic_signal_processing", 0, ["noise_reduction", "speech_processing", "speech_recognition"]],
            ["adaptive_signal_processing", 0, ["adaptive_filter"]],
            ["digital_signal_processing", 0, ["delta_modulation"]],
            ["image_processing", 0, ["image_processing_software"]],
        ]

    elif corpusName == "NuclearReactors":
        userInput = [
        ["ROOT", -1, ["Basic_Concepts", "Materials", "Reactions", "Devices", "Nuclear_Reactor_Types", "Theories_And_Models", "Equations_And_Concepts"]], 
        
        ["Basic_Concepts", 0, []]
        ["Materials", 0, []]
        ["Reactions", 0, []]
        ["Devices", 0, []]
        ["Nuclear_Reactor_Types", 0, []]
        ["Theories_And_Models", 0, []]
        ["Equations_And_Concepts", 0, []]

        ### Classification generated by GPT-4 (Can be deleted later) ###
        # ["Basic_Concepts", 0, ["Atom_density", "Atomic_mass", "Atomic_enrichment", "Avogadroâ€™s_number", "Binding_Energy", 
        # "Charge", "Coulomb_repulsion", "Critical_reactor", "Decay_chains", "Electrical_repulsion_of_the_nuclei",
        # "Electromagnetic_radiation", "Exothermic_reactions", "Fissionable_nuclide_concentrations", "Momentum", "Neutron_lifetime", 
        # "Notation", "Plutonium", "Radial_peaking_factor", "Radioactivity", "Saturation_activity", "Shutdown_margin",
        # "Thermal_diffusion", "Thermal_disadvantage_factor", "Thermal_time_constant"]],

        # ["Materials", 0, ["Actinides", "Americium", "Boron_and_gadolinium", "Burnable_poisons", "Boron_poison", "Composite_coefficients", 
        # "Control_Poisons", "Deuterium", "Fissile_material", "Fission_products", "Fertile_isotopes", "Fuel_enrichment", "Helium", 
        # "Hydrogen-2", "Iodine-131", "Iodine-135", "Neptunium", "Noble_gases", "Plutonium", "Samarium", "Tellurium-135", 
        # "Thorium", "Uranium", "Uranium-235", "Uranium-238", "Xenon", "Zirconium"]],

        # ["Reactions", 0, ["Absorption", "Alpha_and_Beta_particles", "Chain_Reactions", "Energetics", "Endothermic_reactions", 
        # "Energy_Degradation", "Fission", "Fusion_reactions", "Neutron_capture", "Neutron_colliding/collisions", "Neutron_Energy", 
        # "Nuclear_Reaction", "Radioactive_Decay", "Resonance_absorption", "Scattering_Collisions", "Thermonuclear_reaction"]],

        # ["Devices", 0, ["Calandria", "Coolant_channels", "Fuel_assembly_segments", "Fuel_Rod", "Power_Reactor_Core", 
        # "Pressurized_water_reactor", "Steam_Generators"]],

        # ["Nuclear_Reactor_Types", 0, ["Boiling_water_reactors_(BWRs)", "CANDU_reactors", "Gas-cooled_fast_reactors_(GCFR)", 
        # "Graphite-moderated_reactors", "Light_water_reactors_(LWRs)", "RBMK_reactors", "Sodium-cooled_fast_reactor_(SFRs)"]],

        # ["Theories_And_Models", 0, ["Breit-Wigner_formula", "Chain_Reaction", "Energy_Transport", "Fast_reactor_lattices", 
        # "Math_modeling", "Neutron_dist_in_energy", "Neutron_dist_in_reactors", "Neutron_interactions", "Neutron_Kinetics", 
        # "Two_group_theory", "Wigner-way_formula", "Zero_power"]],

        # ["Equations_And_Concepts", 0, ["Axial_buckling", "Balancing_equations", "Bessel_functions", "Billiard_ball_collision", 
        # "Boundary_condition", "Coolant_velocity", "Cross_section_calculation", "Derivatives_and_Integrals", "Differential_Equations", 
        # "Eigenvalues_and_eigenfunctions", "Energy_averaged_reaction_rates", "Excitation_energy", "Ficks_law", "First-order_perturbation_approximation",
        # "Kinetic_Energy", "Laplace_transforms", "Linear_heat_rate", "Maxwell-Boltzmann_distribution", "Momentum", "Neutron_Spectrum", 
        # "Partial_currents", "Power_Coefficient", "Rod_Oscillator", "Scalar_flux", "Thermal_time_constant", "Transport_equation"]],
     ]

    elif corpusName == "sample_dataset":
        userInput = [
            ["ROOT", -1, ["machine_learning", "data_mining", "database"]]
        ]
    else:
        userInput = []

    return userInput


